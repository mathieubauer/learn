<?php

namespace dsw\QuizBundle\Repository;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function findPrevious($id_question, $id_questionnaire) {
        
        $qb = $this->_em->createQueryBuilder('q')
            ->select('q')
            ->from('dswQuizBundle:Question', 'q')
            
            // filtre
            ->where('q.id < :id_question')
            ->setParameter(':id_question', $id_question)
            
            ->andWhere('q.questionnaire = :id_questionnaire')
            ->setParameter(':id_questionnaire', $id_questionnaire)
            
            // trie
            ->orderBy('q.id', 'DESC')

            // récupère le premier enregistrement
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    
    public function findNext($id_question, $id_questionnaire) {
        
        $qb = $this->_em->createQueryBuilder('q')
            ->select('q')
            ->from('dswQuizBundle:Question', 'q')
            
            // filtre
            ->where('q.id > :id_question')
            ->setParameter(':id_question', $id_question)
            
            ->andWhere('q.questionnaire = :id_questionnaire')
            ->setParameter(':id_questionnaire', $id_questionnaire)
            
            // trie
            ->orderBy('q.id', 'ASC')

            // récupère le premier enregistrement
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    
    public function findGoodAnswer($id_question) {
        
        // devrait aller dans le AnswerRepository ?
        
        $qb = $this->_em->createQueryBuilder('a')
            ->select('a')
            ->from('dswQuizBundle:Answer', 'a')
            
            // filtre
            ->where('a.question = :id_question')
            ->setParameter(':id_question', $id_question)
            
            ->andWhere('a.score = 1')
            
            // trie
            ->orderBy('a.id', 'ASC')

            // récupère le premier enregistrement
            // ->setFirstResult(0)
            // ->setMaxResults(1)
        ;
        
        // une seule bonne réponse car on prend question par question
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    

    
}
