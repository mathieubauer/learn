<?php

namespace dsw\LearnBundle\Repository;

/**
 * ModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function countByCourse($id_course) {
        
        $qb = $this->_em->createQueryBuilder();

        $qb
            
            ->from('dswLearnBundle:Module', 'm')
            ->select('count(m.id)')
            ->where('m.course = :id')
            ->setParameter('id', $id_course)
            
        ;
        
        return $qb->getQuery()->getSingleScalarResult();
        
    }
    
    /*
    public function findPrevious($id_question, $id_questionnaire) {
        
        $qb = $this->_em->createQueryBuilder('q')
            ->select('q')
            ->from('dswQuizBundle:Question', 'q')
            
            // filtre
            ->where('q.id < :id_question')
            ->setParameter(':id_question', $id_question)
            
            ->andWhere('q.questionnaire = :id_questionnaire')
            ->setParameter(':id_questionnaire', $id_questionnaire)
            
            // trie
            ->orderBy('q.id', 'DESC')

            // récupère le premier enregistrement
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    */
    
    public function findNext($order_module, $id_course) {
        
        $qb = $this->_em->createQueryBuilder('m')
            ->select('m')
            ->from('dswLearnBundle:Module', 'm')
            
            // filtre
            
            ->andWhere('m.titre IS NULL')
            
            ->andWhere('m.displayOrder > :order_module')
            ->setParameter(':order_module', $order_module)
            
            ->andWhere('m.course = :id_course')
            ->setParameter(':id_course', $id_course)
            
            
            
            // trie
            ->orderBy('m.displayOrder', 'ASC')

            // récupère le premier enregistrement
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    
}
