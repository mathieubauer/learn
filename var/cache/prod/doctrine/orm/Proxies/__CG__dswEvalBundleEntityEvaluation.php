<?php

namespace Proxies\__CG__\dsw\EvalBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Evaluation extends \dsw\EvalBundle\Entity\Evaluation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'id', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'sexe', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'animateur', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'evalue', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'evaluateurs', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'records', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'textes'];
        }

        return ['__isInitialized__', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'id', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'sexe', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'animateur', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'evalue', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'evaluateurs', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'records', '' . "\0" . 'dsw\\EvalBundle\\Entity\\Evaluation' . "\0" . 'textes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Evaluation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSexe($sexe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSexe', [$sexe]);

        return parent::setSexe($sexe);
    }

    /**
     * {@inheritDoc}
     */
    public function getSexe()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSexe', []);

        return parent::getSexe();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnimateur(\dsw\UserBundle\Entity\User $animateur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnimateur', [$animateur]);

        return parent::setAnimateur($animateur);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnimateur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnimateur', []);

        return parent::getAnimateur();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvalue(\dsw\UserBundle\Entity\User $evalue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvalue', [$evalue]);

        return parent::setEvalue($evalue);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvalue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvalue', []);

        return parent::getEvalue();
    }

    /**
     * {@inheritDoc}
     */
    public function addEvaluateur(\dsw\UserBundle\Entity\User $evaluateur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvaluateur', [$evaluateur]);

        return parent::addEvaluateur($evaluateur);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEvaluateur(\dsw\UserBundle\Entity\User $evaluateur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEvaluateur', [$evaluateur]);

        return parent::removeEvaluateur($evaluateur);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvaluateurs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvaluateurs', []);

        return parent::getEvaluateurs();
    }

    /**
     * {@inheritDoc}
     */
    public function addRecord(\dsw\EvalBundle\Entity\Record $record)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRecord', [$record]);

        return parent::addRecord($record);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRecord(\dsw\EvalBundle\Entity\Record $record)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRecord', [$record]);

        return parent::removeRecord($record);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecords', []);

        return parent::getRecords();
    }

    /**
     * {@inheritDoc}
     */
    public function addTexte(\dsw\EvalBundle\Entity\Texte $texte)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTexte', [$texte]);

        return parent::addTexte($texte);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTexte(\dsw\EvalBundle\Entity\Texte $texte)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTexte', [$texte]);

        return parent::removeTexte($texte);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextes', []);

        return parent::getTextes();
    }

}
